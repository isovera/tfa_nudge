<?php

/**
 * Implements hook_views_api().
 */
function tfa_nudge_views_api() {
  return array(
    'api' => '3.0',
  );
}

/**
 * Implements hook_menu()
 */
function tfa_nudge_menu(){
  $items = array();
  $items['admin/config/people/tfa_nudge'] = array(
    'title' => 'Two-factor Authentication Nudge Settings',
    'description' => 'Manage TFA Nudge Settings',
    'page callback' => 'drupal_get_form',
    'type' => MENU_NORMAL_ITEM,
    'page arguments' => array('tfa_nudge_admin_settings_form', 1),
    'access arguments' => array('administer tfa_nudge settings'),
    'file' => 'tfa_nudge.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function tfa_nudge_permission(){
  $perm = array(
    'administer tfa_nudge settings' => array(
      'title' => t('Administer TFA Nudge Settings'),
    )
  );
  return $perm;
}

/**
 * Implements hook_action_info().
 */
function tfa_nudge_action_info() {
  return array(
    'tfa_nudge_reminder_email' => array(
      'type' => 'user',
      'label' => t('Send TFA Reminder Email'),
      'configurable' => FALSE,
      'pass rows' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * @param $user
 *  A user object for whom an email will be sent
 */
function tfa_nudge_reminder_email($user) {
  $record = db_select('tfa_user_settings', 'u')
    ->fields('u')
    ->condition('uid', $user->uid,'=')
    ->execute()
    ->fetchAssoc();
  if (!isset($record['status']) || $record['status'] == '0') {
    $settings = variable_get('tfan_settings');
    $subject = (!empty($settings['subject'])) ? $settings['subject'] : 'Please enable TFA on [site:name]';
    $subject = token_replace($subject);
    $body = (!empty($settings['body'])) ? $settings['body'] : 'Please enable TFA on [site:name]';
    $body = token_replace($body, array('user' => $user));
    $params = array(
      'subject' => $subject,
      'body' => $body,
    );
    drupal_mail('tfa_nudge', 'notice', $user->mail, user_preferred_language($user), $params);
  }
}

/**
 * Implements hook_mail().
 */
function tfa_nudge_mail($key, &$message, $params){
  $message['subject'] = $params['subject'];
  $message['body'] = array($params['body']);
}

/**
 * Implementation of hook_cron_queue_info()
 */
function tfa_nudge_cron_queue_info() {
  $queues['tfa_nudge'] = array(
    'worker callback' => 'tfa_nudge_reminder_email', // This is the callback function for each queue item.
    'time' => 180, // This is the max run time per cron run in seconds.
  );
  return $queues;
}

/**
 * Implementation of hook_cron()
 */
function tfa_nudge_cron() {
  $settings = variable_get('tfan_settings');

  if ($settings['auto_emails'] == 'yes') {
    if (!isset($settings['last_sent'])) {
      // If last_sent isn't set, this is the first time auto emails have been sent.
      $settings['last_sent'] = REQUEST_TIME;
      variable_set('tfan_settings', $settings);
    }

    // Convert interval to seconds to compare to last sent timestamp
    $interval = $settings['interval'] * 24 * 60 * 60;

    if (REQUEST_TIME - $settings['last_sent'] >= $interval){
      $uids = array();
      $users_roles = array();

      foreach ($settings['roles'] as $rid) {
        // Query database for all users with role $rid
        $records = db_select('users_roles', 'u')
          ->fields('u')
          ->condition('rid', $rid,'=')
          ->execute();
        foreach ($records as $record) {
          $uids[] = $record->uid;
        }
        // $users_roles becomes a 2 dimensional array of user objects keyed by $rid
        $users_roles[$rid] = user_load_multiple($uids);
      }

      // Put everything in a queue for processing.
      $queue = DrupalQueue::get('tfa_nudge');
      // Iterate through each role
      foreach ($users_roles as $role) {
        // Iterate through each user object of a given role
        foreach ($role as $user) {
          $queue->createItem($user, $settings);
        }
      }
      // Update last_sesnt to current time
      $settings['last_sent'] = REQUEST_TIME;
      variable_set('tfan_settings', $settings);
    }
  }
}
